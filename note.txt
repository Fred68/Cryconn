##############################################################################
#
#		DA FARE
#
#
#	v	Fatto
#	.	Non fatto
#	->	Da fare
#	?	Verificare
#	x	Annullato
#	**	In corso
#
#
##############################################################################


	IMPORTANTE:
	JS non è sicuro. Un attacco MIM potrebbe alterare il codice js e intercettare la chiave AES
	con la quale poi leggere i dati sul server.
	USARE CHIAVE ASIMMETRICA (RSA)
	Con la chiave asimmetrica, il server scambia ogni volta una nuova chiave AES
	La chiave AES è valida per una sola sessione (o per un tempo limitato)
	ma permette scambio dati valoce (RSA è lento)



	v		Eseguire ShowPage soltanto una volta (al login e dopo il login). Gli altri comandi vanno eseguiti attraverso xlmhttprequest
		?	Aggiungere controllo del timeout !!!
		?	Correggere messaggi refresh, per cancellare messaggio ed errore precedenti.
		?	Separare i messaggi del refresh, in campo html diverso da quello del messaggio, se no lo cancella subito
		?	Ad ogni refresh, CONTROLLARE IL DATABASE, se l'utente è connesso. 
		?	Prima di eseguire il Clear Logged, verificare che abbia raggiunto il timeout.
		?	Attivare e disattivare il timer di refresh se login effettuato o no. Fatto in base a comando in risposta del server.
	.		Aggiungere poi un secondo timer per refresh locale della pagina.
			Il timer lungo verifica la connessione
			Il timer corto interroga il server se ci sono messaggi.
			Coda di messaggi: da implementare in futuro
	.		Rifare programma con coda di messaggi e stato.
			Il client chiede se ci sono messaggi in coda, con un timer + un flag, se un messaggio deve esser controllato subito.
			Il server ha una coda di messaggi
	v		Usare direttamente include 'pagine.php' per mostrarla, senza dover leggere il file
	v		Ripulite alcuni post contro sql injection.
	.		Vedere cosa fare con sha1(password), dovrebbe contenere solo caratteri alfanumerici			
	.		Spostare tutti i nomi delle variabili di sessione nelle costanti
	.		Completare script.php con caricamento script da cdn o locale
	v		Inserire la chiave AES e salvarla in locale.
			Usare sessionStorage.
	.		Studiare due coppie di chiavi asimmetriche, per l'invio sicure della chiave aes
			Messaggi da client js a server php:
				js chiede a php una chiave
				php genera chiave pubblica e privata.
				Invia chiave pubblica a js
				js crittografa il messaggio con chiave pubblica e lo invia
				php decifra con chiave privata
			Messaggi da server a client:
				php chiede a js una chiave
				js genera chiave pubblica e privata
				js invia chiave pubblica a php
				php prepara il messaggio (la chiave aes + altri dati eventuali, timestamp, session ecc...)
				php crittografa il messaggio con la chiave pubblica e lo invia
				js decifra il messaggio con la chiave privata
	v		Crittografare con chiave pubblica la chiave AES inviata da server a Client.
				js genera coppia di chiavi puk e prk.
				js Invia la puk a php
				php genera la chiave aes e la unisce al sid
				php crittografa aes+sid con la puk e la invia al client
				js decifra aes+sid con la prk.
	.		Studiare modo per evitare di generare le chiavi in JS, e per il solo scambio sicuro della chiave aes.
			Sistema 1:
			Non sufficiente, manca l'autenticazione, un MITM potrebbe alterare il codice js e sostituire messaggi.
				js chiede a php una chiave
				php genera chiave pubblica e privata.
				Invia chiave pubblica a js
				js prepara un messaggio contenente una chiave aes temporanea
				js crittografa il messaggio con la chiave pubblica e la invia
				php decifra il messaggio con chiave privata ed estrae l'aes temporaneo
				php genera l'aes di sessione, lo crittografa con la chiave temporanea e la invia.
				NON VA BENE: manca l'autenticazione, che i messaggi da client non siano quelli di un MITM.
				JS non deve generare una chiave aes temporanea, ma una coppia di chiavi pubblica e privata.
			Sistema 2:
			Troppo complesso
				js chiede a php la chiave aes
				php genera le chiavi del server pubblica Spu e privata Spr
				Invia chiave pubblica Spu a js
				js riceve la chiave pubblica Spu
				js genera le chiavi del Client pubblica Cpu e privata Cpr
				js prepara un messaggio con la chiave Cpu 
				js crittografa il messaggio con la Spu, e lo invia
				php decifra il messaggio con la chiave Spr
				php estrae la chiave Cpu
				php genera la chiave AES di sessione
				php prepara una messaggio con la chiave AES generata
				php crittografa il messaggio con la chiave Cpu e lo invia
				js riceve il messaggio e lo decifra con la Cpr
				estrae la chaive AES e la memorizza.
				NO, troppo complesso !
			Studiare sistema con autenticazione
				Server e Client devono scambiarsi, prima e con un canale differente, due coppie di chiavi pubblica e privata.
				Poi possono usare queste chiavi per scambiarsi la chiave aes oppure per autenticare i messaggi.
	v		Richiedere testo in js e salvarlo in locale. Sì, con Blob e download link.
	v		Leggere il contenuto di un file in js. Sì, con <input type='file'> e FileReader.
	.		Attenzione: prevedere stati o sequenza di login. In caso di errore di autenticazione o di altro, eseguire logout
	
SISTEMA ATTUALE
			Login:
			1.	js		Click login : invia CMD_LOGIN + user + l'hash della password 
			2.	php		Verifica user e pwd, imposta session variables e aggiunge agli utenti connessi.
						Risponde con ID_START e sid
			3.	js		Memorizza sid in sessione.
						Esegue ID_START: avvia timer.
						Esegue CMD_CONNECT: genera chiavi RSA, memorizza puk in sessione.
						Invia CMD_CONNECT + puk
			4.	php		Genera chiave AES, la unisce alla sid, crittografa con la puk e codifica in base64.
						Risponde con CMD_CONNECT + aes e sid criptati
			5.	js		Decifra e memorizza la chiave AES e verifica la sid.
						Risponde con richiesta CMD_AESPK
			6.	php		Genera chiavi RSA
						Invia CMD_AESPK + puk
			7.	js		Memorizza la puk.
						Esegue CMD_AES: crittografa chiave AES con chiave puk.
						Invia come comando CMD_AES.
			8.	php		Decifra la chiave AES con la prk.
						La verifica con quella memorizzata.
						Risponde con CMD_AES e l'hash dell'AES
			9.	js		Verifica l'hash della chiave AES memorizzata con quello ricevuto.			
COMANDI:
			C1.	js		Invia CMD_COMMAND + comando crittografato con AES
			C2.	php		Decifra il comando, lo esegue. Compone la risposta come comando=testo. La crittografa con chiave AES, ed invia con comando CMD_COMMAND.
			C3.	js		Riceve CMD_COMMAND. Decifra comando=testo. Elabora il comando.
ELABORAZIONE COMANDI (CLIENT JS) DECIFRATI
			default			Mostra il messaggio
			CMD_PK			Estrae il testo con la chiave privata. Mostra il link di download, crea un blob con il testo e lo associa al target del link.
ELABORAZIONE COMANDI (SERVER PHP) DECIFRATI
			CMD_PK			Genera chiavi RSA. Invia la chiave privata. [poi deve memorizzare la pubblica e verificare la ricezione corretta dal Client]
PULSANTI
			Prk				Invia CMD_COMMAND con comando CMD_PK.
PUNTI VULNERABILI DEL LOGIN:
			1.	js		L'hash può essere riprodotto, bloccando o alterando il login, il clear o il logout. Non vi è autenticazione.
						- Crittografare l'hash della password con la chiave privata del Client, così l'identificazione è univoca.
							No, perchè un MITM potrebbe semplicemente memorizzare e reinviare i dati in un secondo tempo.
						- Crittografare l'hash della password ed un timestamp: così i dati inviati sono sempre diversi.
							No, può comunque esser riutilizzato.
							Il timestamp ha una struttura costante.
						- Crittografare l'hash della password ed un timestamp. Il server memorizza l'ultimo login e verifica che il timestamp sia successivo.
							No, complesso e comunque aggirabile con finti timestamp.
					----->	Creare coppia di chiavi (puk su server php, prK inviata al Client in modo sicuro o crittografato, poi eliminata).
							Il client legge prima il file locale contenente la chiave privata.
							Genera l'hash della password e timestamp e li crittografa insieme con la chiave privata.
							Il server lo decifra con la chiave pubblica per quell'utente.
						->	Ricordarsi di cambiare frequentememnte le chiavi RSA.
			2.	php		Invia sid in chiaro.
						-	Inviarlo crittografato con chiave pubblica ?
					xxxx->	No, inutile... il sid è un dato inviato in chiaro con l'header della sessione ?
			3.			Un MITM può sostituire il puk con il suo, poi intercettare la risposta del server e sostituirla con la sua.
					!!!!	PUNTO DEBOLE DI TUTTO IL SISTEMA !
			6.			Il server risponde con un comando invariante, cha facilita la forzatura della chiave.
ALTRE VULNERABILITA'
			1.		sessionStorage
			2.		Random number generation
			3.		session id
			4.		js code (better encrypted)
			5.		online content data 
MODIFICARE LA SEQUENZA COME SEGUE:
			Prima della connessione:
			-	php			Crea due coppie di chiavi per ogni utente.
							Consegna in modo sicuro la chiave privata (della 1° coppia) e la chiave pubblica (della 2° coppia).
							Memorizza la chiave pubblica della 1° coppia e quella privata della 2° coppia nel database.
			-	php			In alternativa, con connessione criptata, invia la chiave privata al client.
			-	js			All'avvio, legge il file con la chiave privata e la memorizza in una variabile del programma, Meglio non in session variable.

			Creare funzioni php e relativi comandi (CMD_COMMAND) per:
			v Creare coppie di chiavi RSA, in php
			- Inviare una chiave (pubblica o privata) a js, criptata con chiave aes, in php, da salvare.
			- Verificare la chiave (pubblica o privata) ricevuta dall'utente (sufficiente hash della chiave), in php e js
			- Memorizzare una chiave (pubblica o privata) nel database dell'utente
			Connessione:
			-	js			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
	
